#!/usr/bin/env python3

'''This script will convert CSV files (with known format) to a netfilter/iptables-restore file.'''

import sys
import csv
import hashlib
# Used to handle timing information on created files
from datetime import datetime
# Used to handle timezone
from functools import partial
from tzlocal import get_localzone

# Local software information
__version__ = "0.1"
__author__ = "Sylvain Leroy"
myOutput = sys.stdout
inputFileName = "rules.csv"
defaultPolicy = "ACCEPT"

# Local system variables
timeFormat = "%H:%M:%S %Z"
myTimezone = get_localzone()


###########################################################################
def sha1sum(filename):
    '''Calculate the sha1 value of a file's content.'''
    with open(filename, mode='rb') as file_desc:
        hsha1 = hashlib.sha1()
        for buf in iter(partial(file_desc.read, 128), b''):
            hsha1.update(buf)
    file_desc.close()
    return hsha1.hexdigest()

###########################################################################
def sha256sum(filename):
    '''Calculate the sha256 value of a file's content.'''
    with open(filename, mode='rb') as file_desc:
        hsha256 = hashlib.sha256()
        for buf in iter(partial(file_desc.read, 128), b''):
            hsha256.update(buf)
    file_desc.close()
    return hsha256.hexdigest()

###########################################################################
def write_headers(filename):
    """Write headers for the generated file contening hashes of the source CSV file."""

    # Compute source rules file hash
    print("# Source file rules sha1 hash is : " + sha1sum(filename), file=myOutput)
    print("# Source file rules sha256 hash is : " + sha256sum(filename), file=myOutput)
    print("", file=myOutput, flush=True)

###########################################################################
def write_rules(table, rules_reader):
    """Write rules from CSV data and generate a iptables-restore compliant file
    for a specific table (examples are : filter, nat, mangle, raw)."""

    # Computer timestamp for every rules creation
    today = datetime.now(myTimezone)
    print("# Generated by CSV2Netfilter v"
          + __version__
          + " on "
          + today.strftime(timeFormat), file=myOutput)

    # Generate rules
    print("*" + table, file=myOutput)
    print(":INPUT " + defaultPolicy + " [0:0]", file=myOutput)
    print(":FORWARD " + defaultPolicy + " [0:0]", file=myOutput)
    print(":OUTPUT " + defaultPolicy + " [0:0]", file=myOutput)

    for row in rules_reader:
        # print("*******" + row['table'] + "*******")
        if row['table'] == table:
            if row['chain']:
                print('-A ' + row['chain'], file=myOutput, end=" ")
            if row['protocol']:
                print('-p ' + row['protocol'], file=myOutput, end=" ")
            if row['ipsource']:
                print('-s ' + row['ipsource'], file=myOutput, end=" ")
            if row['ipdest']:
                print('-d ' + row['ipdest'], file=myOutput, end=" ")
            if row['portsrc']:
                print('--sport ' + row['portsrc'], file=myOutput, end=" ")
            if row['portdest']:
                print('--dport ' + row['portdest'], file=myOutput, end=" ")
            if row['rule']:
                print('-j ' + row['rule'], file=myOutput, end=" ")
            if row['machine']:
                print('-m comment --comment "' + row['machine'] + '"', file=myOutput)

    print("COMMIT", file=myOutput)

    today = datetime.now(myTimezone)
    print("# Completed on " + today.strftime(timeFormat), file=myOutput, flush=True)

###########################################################################

csvFile = open(inputFileName, 'r')

write_headers(inputFileName)

#
rules = csv.DictReader(csvFile, delimiter=';')


# for row in rules:
#     if row['table'] == "filter":


write_rules("filter", rules)
# write_rules("nat", rules)
# write_rules("mangle", rules)
# write_rules("raw", rules)

csvFile.close()
